name: CI/CD pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  # Build stage: prepare Python and install dependencies
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        # Updated to v4
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        id: set-python
        with:
          # CRITICAL FIX: Changed from unstable 3.13 to stable 3.12
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        # Installs all tools (pytest, black, pylint, bandit, click) from requirements.txt
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Dependencies installed successfully"

  # Test stage: run unit/integration tests
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # CRITICAL FIX: Changed to 3.12

      - name: Install Dependencies (will use cache from 'build')
        run: pip install -r requirements.txt

      - name: Unit Tests with Coverage
        # Assumes unit tests are in tests/unit/
        run: |
          echo "Running unit tests..."
          pytest tests/unit/ -v --cov=src --covreport=term --cov-report=xml

      - name: Integration Tests
        # Assumes integration tests are in tests/integration/
        run: |
          echo "Running integration tests..."
          pytest tests/integration/ -v --tb=short

  # Coverage stage: run coverage and upload HTML report
  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # CRITICAL FIX: Changed to 3.12

      - name: Install Dependencies (will use cache from 'build')
        run: pip install -r requirements.txt

      - name: Run tests with coverage and generate HTML report
        # Uses tests/ to catch both unit and integration tests
        run: |
          echo "Checking test coverage..."
          pytest tests/ --cov=src --cov-fail-under=80 --cov-report=term-missing --cov-report=html

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  # Repository quality (lint) stage
  lint:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # CRITICAL FIX: Changed to 3.12

      - name: Install Pylint (will use cache from 'build')
        run: pip install pylint

      - name: Run pylint and save report
        run: |
          echo "Running pylint..."
          # Run pylint, allow it to fail (|| true) so we can manually check the score
          pylint src/ --output-format=text > lint_report.txt || true
          echo "Saved lint report to lint_report.txt"
          score_line=$(grep -E "rated at" lint_report.txt || true)
          score=$(echo "$score_line" | sed -n 's/.*rated at \([0-9.]*\)\/10.*/\1/p')
          echo "Pylint score: ${score:-not-found}"
          if [ -z "$score" ]; then
            echo "Could not determine pylint score"
            exit 1
          fi
          # Fails if score is less than 7.0
          awk -v s="$score" 'BEGIN{ if (s+0 < 7.0) exit 1 }' || (echo "Pylint score $score is below threshold 7.0" && exit 1)

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint_report.txt

  # Formatting stage
  format:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # CRITICAL FIX: Changed to 3.12

      - name: Install black (will use cache from 'build')
        run: pip install black

      - name: Check formatting with black (Fails if unformatted)
        # CI should fail if code is not formatted.
        run: |
          echo "Checking formatting with black..."
          black src/ tests/ --check

      - name: Show black diff (if any)
        # Only runs if the previous step failed, showing what needs fixing
        if: failure()
        run: black src/ tests/ --diff || true

  # Security stage: run bandit and upload JSON report
  security:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # CRITICAL FIX: Changed to 3.12

      - name: Install bandit (will use cache from 'build')
        run: pip install bandit

      - name: Run bandit (console)
        run: |
          echo "Running bandit security scan..."
          bandit -r src/ -v || true

      - name: Run bandit (json output)
        run: |
          rm -f security_report.json || true
          bandit -r src/ -f json -o security_report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security_report.json

  # Deployment stage
  deploy:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts into an 'artifacts/' directory structure
          pattern: coverage-html,lint-report,security-report
          path: artifacts/
          merge-multiple: true
          continue-on-error: true

      - name: Simple package: compile, zip and upload
        run: |
          echo "Creating simple deployment package..."
          rm -f deployment-package.zip || true
          # compile python files (best-effort)
          python -m compileall -b -f src || true
          # create zip containing source, compiled files, and any artifacts
          zip -r deployment-package.zip src artifacts README.md requirements.txt || true
          echo "Created deployment-package.zip"
          ls -lh deployment-package.zip || true
          unzip -l deployment-package.zip || true

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-zip
          path: deployment-package.zip
